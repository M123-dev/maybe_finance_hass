# Stage 1: Clone the Maybe Finance repository
ARG BUILD_ARCH
FROM --platform=${BUILD_ARCH} alpine/git AS clone
WORKDIR /src
RUN apk add --no-cache git && \
    git clone https://github.com/maybe-finance/maybe.git . && \
    git checkout tags/v0.3.0

# Stage 2: Base image with necessary dependencies
ARG BUILD_ARCH
FROM --platform=${BUILD_ARCH} ruby:3.3.5-slim AS base

# Install base packages
RUN apt-get update -qq && \
    apt-get install --no-install-recommends -y \
    curl libvips postgresql-client jq bash && \
    rm -rf /var/lib/apt/lists/*

# Set production environment
ENV RAILS_ENV="production" \
    BUNDLE_DEPLOYMENT="1" \
    BUNDLE_PATH="/usr/local/bundle" \
    BUNDLE_WITHOUT="development"

# Copy cloned source code
COPY --from=clone /src /rails
WORKDIR /rails

# Stage 3: Build stage
FROM base AS build

# Install build dependencies
RUN apt-get update -qq && \
    apt-get install --no-install-recommends -y \
    build-essential git libpq-dev pkg-config && \
    rm -rf /var/lib/apt/lists/*

# Install gems
RUN bundle install && \
    rm -rf ~/.bundle/ "${BUNDLE_PATH}"/ruby/*/cache "${BUNDLE_PATH}"/ruby/*/bundler/gems/*/.git && \
    bundle exec bootsnap precompile --gemfile

# Precompile bootsnap and assets
RUN bundle exec bootsnap precompile app/ lib/
RUN SECRET_KEY_BASE_DUMMY=1 ./bin/rails assets:precompile

# Final stage
FROM base

# Clean up
#RUN rm -rf /var/lib/apt/lists /var/cache/apt/archives

# Copy built artifacts
COPY --from=build /usr/local/bundle /usr/local/bundle
COPY --from=build /rails /rails

# Setup non-root user
RUN groupadd --system --gid 1000 rails && \
    useradd rails --uid 1000 --gid 1000 --create-home --shell /bin/bash && \
    chown -R rails:rails db log storage tmp
USER rails

# Copy startup script
COPY run.sh /usr/local/bin/run.sh
RUN chmod +x /usr/local/bin/run.sh

# Entrypoint prepares the database.
ENTRYPOINT ["/usr/local/bin/run.sh"]

# Start the server by default, this can be overwritten at runtime
EXPOSE 3001
